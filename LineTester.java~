import org.junit.*;
import static org.junit.Assert.*;

/** 
 * Test class Line
 */ 

public class LineTester {
  
  /**
   * Test toString method
   */
  @Test
  public void testtoString() {
    assertEquals(new Line(new Point(3.0, 4.0, 7.0), new Point(9.0, 10.0, 11.0)).toString(), "3.0 + 6.0t, 4.0 + 6.0t, 7.0 + 4.0t");   //test random numbers
    assertEquals(new Line(new Point(-3.0, 4.0, 1.0), new Point(5.0, -7.0, -7.0)).toString(), "-3.0 + 8.0t, 4.0 - 11.0t, 1.0 - 8.0t");   //test random negative numbers
    assertEquals(new Line(new Point(6.0, 4.0, 1.0), new Point(5.0, 7.0, 7.0)).toString(), "6.0 - 1.0t, 4.0 + 3.0t, 1.0 + 6.0t");   //test when x difference < 0
    assertEquals(new Line(new Point(3.0, 4.0, 1.0), new Point(5.0, -1.0, 7.0)).toString(), "3.0 + 2.0t, 4.0 - 5.0t, 1.0 + 6.0t");   //test when y difference < 0
    assertEquals(new Line(new Point(3.0, 4.0, -1.0), new Point(5.0, 7.0, -7.0)).toString(), "3.0 + 2.0t, 4.0 + 3.0t, -1.0 - 6.0t");   //test when z difference < 0    
  }
  
  /**
   * Test equals method
   */
  @Test 
  public void testequals() {
    assertTrue(new Line(new Point(3.0, 4.0, 5.0), new Point(6.0, 4.0, 5.0)).equals(new Line(new Point(6.0, 4.0, 5.0), new Point(3.0, 4.0, 5.0))));  //test true: same line with switched Points
    assertFalse(new Line(new Point(3.0, 4.0, 5.0), new Point(6.0, 4.0, 5.0)).equals(new Line(new Point(7.0, 6.0, 3.0), new Point(5.0, 4.0, 3.0))));  //test false: different lines
  }
  
  /**
   * Test getVector method
   */
  @Test
  public void testgetVector() {
    assertEquals(new Line(new Point(3.0, 4.0, 7.0), new Point(9.0, 10.0, 11.0)).getVector(), new Vector(9.0-3.0, 10.0-4.0, 11.0-7.0));          //test random Points
    assertEquals(new Line(new Point(3.0, -4.0, 7.0), new Point(-9.0, 10.0, -11.0)).getVector(), new Vector(-9.0-3.0, 10.0-(-4.0), -11.0-7.0));  //test random Points with negative coordinates
  }
  
  /**
   * Test isParallel method
   */
  @Test
  public void testisParallel() {
    assertTrue(Line.isParallel(new Line(new Point(3.0, 4.0, 9.0), new Point(3.0, 4.0, 11.0)), new Line(new Point(-5.0, 6.0, 9.0), new Point(-5.0, 6.0, 11.0))));   //test true with two random parallel lines
    assertFalse(Line.isParallel(new Line(new Point(3.0, 4.0, 9.0), new Point(3.0, 4.0, 11.0)), new Line(new Point(3.0, 8.0, 9.0), new Point(10.0, 8.0, 11.0))));   //test false with two random different lines
  }
  
   /**
   * Test Line2D intersection method
   */
   @Test
  public void test2Dintersection() {
    assertEquals(Line.intersection(new Line2D(new Point2D(-3.0, -3.0), new Point2D(3.0, 3.0)), new Line2D(new Point2D(-2.0, 1.0), new Point2D(2.0, -1.0))), new Point2D(0.0, 0.0));   //test for two lines that intersect
    assertEquals(Line.intersection(new Line2D(new Point2D(-4.0, 4.0), new Point2D(4.0, 4.0)), new Line2D(new Point2D(3.0, -3.0), new Point2D(3.0, 5.0))), new Point2D(3.0, 4.0));     //test for two lines that are perpendicular and intersect
    assertEquals(Line.intersection(new Line2D(new Point2D(-4.0, 4.0), new Point2D(4.0, 4.0)), new Line2D(new Point2D(3.0, 4.0), new Point2D(0.0, 4.0))), null);                       //test for two lines that equal to each other
    assertEquals(Line.intersection(new Line2D(new Point2D(-1.0, -1.0), new Point2D(1.0, 1.0)), new Line2D(new Point2D(2.0, 2.0), new Point2D(4.0, 4.0))), null);                      //test for two random 2D points that don't intersect
   }
   
  /**
   * Test Line intersection method
   */
   @Test
  public void testintersection() {
     assertEquals(Line.intersection(new Line(new Vector(2.0, 3.0, 1.0), new Point(1.0, 0.0, 0.0)), new Line(new Vector(5.0, 1.0, -3.0), new Point(0.0, 5.0, 5.0))), new Point(5.0, 6.0, 2.0));    //test two random lines that intersect
     assertEquals(Line.intersection(new Line(new Point(5.0, 5.0, 4.0), new Point(10.0, 10.0, 6.0)), new Line(new Point(5.0, 5.0, 5.0), new Point(10.0, 10.0, 3.0))), new Point(6.25, 6.25, 4.5)); //test two more random lines that intersect
     assertEquals(Line.intersection(new Line(new Point(10.0, 5.0, 4.0), new Point(10.0, 10.0, 6.0)), new Line(new Point(5.0, 5.0, 5.0), new Point(10.0, 10.0, 3.0))), null);                      //test two lines that don't intersect
   }
}